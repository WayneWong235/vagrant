# ansible-pull setup
#
# on remote hosts, set up ansible to run periodically using the latest code
# from a particular checkout, in pull based fashion, inverting Ansible's
# usual push-based operating mode.
#
# This particular pull based mode is ideal for:
#
# (A) massive scale out
# (B) continual system remediation
#
# DO NOT RUN THIS AGAINST YOUR HOSTS WITHOUT CHANGING THE repo_url
# TO SOMETHING YOU HAVE PERSONALLY VERIFIED
#
#
---

- name: DevOps challenge app test
  hosts: all
  remote_user: root

  vars:

    # schedule is fed directly to cron
    # schedule: '*/15 * * * *'

    # User to run ansible-pull as from cron
    # cron_user: root

    # File that ansible will use for logs
    # logfile: /var/log/ansible-pull.log

    # Directory to where repository will be cloned
    workdir: /webapps/devops

    # Repository to check out -- YOU MUST CHANGE THIS
    # repo must contain a local.yml file at top level
    #repo_url: git://github.com/sfromm/ansible-playbooks.git
    repo_url: https://bitbucket.org/azneita/devops-challenge.git

  tasks:
    - name: Install ansible
      apt: 
        name: ['ansible', 'git', 'python-pip'] 
        state: present
      become: true

    - name: Create local directory to work from
      file: 
        path: "{{ workdir }}"
        state: directory
      become: true
    
    - name: Checkout DevOps challenge source code
      git:
        repo: "{{ repo_url }}"
        dest: "{{ workdir }}"
        clone: yes
      become: true

    - name: Install Python Modules
      pip: 
        requirements: "{{ workdir }}/requirements.txt"
      become: true

    - name: Run Flask App
      shell: "/usr/bin/python {{ workdir }}/app.py &"
      become: true

  handlers:
    - name: restart flask app
      service:
        name: flask
        state: restarted